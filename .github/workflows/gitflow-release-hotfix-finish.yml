name: Release and Hotfix Finish

###
#
# Finishes Git flow for release and hotfixes
#
# Trigger: code merged into master branch
#
###

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix/'))
    strategy:
      matrix:
        java: [ 11 ]
    name: Build project with Java ${{ matrix.java }}
    env:
      DEVOPS_CICD_ECR_BASE_URL: ${{ secrets.DEVOPS_CICD_ECR_BASE_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BB_MAVEN_USERNAME: ${{ secrets.BB_MAVEN_USERNAME }}
      BB_MAVEN_PASSWORD: ${{ secrets.BB_MAVEN_PASSWORD }}
      BB_GITHUB_PACKAGES_USER: ${{ secrets.BB_GITHUB_PACKAGES_USER }}
      BB_GITHUB_PACKAGES_PAT: ${{ secrets.BB_GITHUB_PACKAGES_PAT }}

    steps:
      - id: flow-type
        run: echo ::set-output name=release::${{ startsWith(github.event.pull_request.head.ref, 'release/') }}
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v9
        with:
          repositories: '[{ "id": "Backbase Repository", "url": "https://repo.backbase.com/repo" }]'
          plugin_repositories: '[{ "id": "Backbase Repository", "url": "https://repo.backbase.com/repo" }]'
          servers: '[{ "id": "Backbase Repository", "username": "${BB_MAVEN_USERNAME}", "password": "${BB_MAVEN_PASSWORD}" }]'

      # Extract version
      - id: target
        run: |
          VERSION=`echo ${{ github.event.pull_request.head.ref }} |cut -d "/" -f2|cut -d"-" -f1`
          MAJOR=`echo $VERSION |cut -d "." -f1`
          MINOR=`echo $VERSION |cut -d "." -f2`
          INCREMENTAL=`echo $VERSION |cut -d "." -f3`
          echo ::set-output name=major::`echo $MAJOR`
          echo ::set-output name=minor::`echo $MINOR`
          echo ::set-output name=incremental::`echo $INCREMENTAL`
          echo ::set-output name=version::`echo $VERSION`

      - name: Set git username and email
        run: |
          git config --global user.email "bot@backbase.com"
          git config --global user.name "Release BOT"

      # Reset SNAPSHOT incrementalVersion for next dev lifecycle
      - uses: actions/checkout@v2
        with:
          ref: develop
      - name: Update develop version
        run: |
          if ${{ steps.flow-type.outputs.release }} == 'true'
          then
            git fetch
            git merge --allow-unrelated-histories origin/${{ github.event.pull_request.head.ref }} -m "Merge ${{ github.event.pull_request.head.ref }} into develop"
            git push origin develop
            mvn build-helper:parse-version versions:set -DnewVersion=\${{ steps.target.outputs.major }}.\${{ steps.target.outputs.minor }}.0-SNAPSHOT versions:commit
              git add --all
              git commit -m "update version"
              git push
          fi
      # Open PR if it's a hotfix
      - name: Create Pull Request
        id: cpr
        if: steps.flow-type.outputs.release == 'false'
        uses: peter-evans/create-pull-request@v3
        with:
          branch: develop
          base: ${{ github.event.pull_request.head.ref }}
          title: Hotfix ${{ steps.target.outputs.version }}
          reviewers: ${{ github.event.issue.user.login }}
          commit-message: Automated PR for a hotfix
      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
          echo "Pull Request operation - ${{ steps.cpr.outputs.pull-request-operation }}"

      - name: Delete ${{ github.event.pull_request.head.ref }}
        run: |
          git fetch
          git push origin --delete ${{ github.event.pull_request.head.ref }}

      # Update master version
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Update master version
        run: |
          if ${{ steps.flow-type.outputs.release }} == 'true'
          then
            mvn build-helper:parse-version versions:set -DnewVersion=\${{ steps.target.outputs.major }}.\${{ steps.target.outputs.minor }}.\${{ steps.target.outputs.incremental }} versions:commit
              git add --all
              git commit -m "update version"
              git push
          fi

      # Tag master
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Add tag
        run: |
          git tag -a 2021.01 -m "Release 2021.01"
          git push origin 2021.01

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_CICD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVOPS_CICD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEVOPS_CICD_AWS_REGION }}

      - name: Get AWS ECR credentials
        id: ecr-credentials
        run: |
          echo "::set-output name=username::AWS"
          echo "::set-output name=password::`aws ecr get-login-password --region ${{ secrets.DEVOPS_CICD_AWS_REGION }}`"

      - name: Build docker image
        run: mvn clean package -Pdocker-image -Pno-scs -Dmaven.test.skip -Djib.to.auth.username=${{ steps.ecr-credentials.outputs.username }}  -Djib.to.auth.password=${{ steps.ecr-credentials.outputs.password }}