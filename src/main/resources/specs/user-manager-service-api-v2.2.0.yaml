openapi: 3.0.3
info:
  title: User Manager Service API
  description: |
    # User Manager Service API Documentation

    This API provides a way to manage User entities and their relationships with internal (i.e. other DBS capabilities) 
    and external (i.e. Backbase Identity or CRM systems) resources.
    The interfaces defined in this spec can be grouped in 3 categories.
    * User Management API endpoints.
    * Identity Management API endpoints.
    * User Profile Management API endpoints.
  version: '2.2.0'
servers:
  - description: Prism mock server
    url: 'http://localhost:4010'
tags:
  - name: identity-management
  - name: user-management
  - name: user-profile-management
paths:
  /service-api/v2/users:
    get:
      tags:
        - user-management
      summary: Gets a list of Users by their Legal Entity ID
      description: |
        # Gets a list of Users by their Legal Entity ID

        Retrieve a list of users with the search criteria passed as query parameters:
        * entityId: Legal Entity ID that the users belong to. REQUIRED
        * query: Case-insensitive search term used to search for users by their full name.

        This endpoint results are pageable and admit also the following query parameters:
        * from: Page Number. Skip over pages of elements by specifying a start value for the query.
        * size: Number of records that will be shown each request.

        As an example, a request using the following query parameters:

        ```from=2&size=10```

        will show the elements 20th to 30th (non inclusive)
      operationId: getUsers
      parameters:
        - name: entityId
          in: query
          description: Legal Entity ID
          required: true
          schema:
            type: string
          examples:
            example:
              value: 84818327-355c-40c8-bb62-afbb339724df
        - name: query
          in: query
          description: Case-insensitive search term used to search for users by their full name
          required: false
          schema:
            type: string
          examples:
            example:
              value: backb
        - name: from
          in: query
          description: |
            Page Number. Skip over pages of elements by specifying a start value for the query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              value: 20
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          schema:
            type: string
            default: ''
          examples:
            example:
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: size
          in: query
          description: |
            Limit the number of elements on the response. When used in combination with cursor, the value
            is allowed to be a negative number to indicate requesting records upwards from the starting point indicated
            by the cursor.
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              value: 80
        - name: skipHierarchyCheck
          in: query
          description: |
            When this queryParameter is true, the request will omit the Legal Entity hierarchy checks. The Legal
            Entity hierarchy checks are done against the user present in the internal JWT from the `X-CXT-User-Token`
            header.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successfully returned a list of Users
          headers:
            X-Total-Count:
              description: Overall count of users
              schema:
                type: integer
                format: int32
              required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
              examples:
                getUsers:
                  $ref: '#/components/examples/getUsers'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
    put:
      tags:
        - user-management
      summary: Update Users in Batch
      description: |
        # Update Users
        Update batch of users.
      operationId: updateUserInBatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUsersInBatchRequest'
            example:
              - externalId: U00001 - old
                userUpdate:
                  externalId: U00001 - new
                  fullName: name
                  preferredLanguage: EN
                  legalEntityId: 7a382786d514262b75ab9531b749a2b
              - externalId: U00002 - old
                userUpdate:
                  externalId: U00002
                  fullName: full name
                  preferredLanguage: MK
                  legalEntityId: 7a382786d514262b75ab9531b749a2b
      responses:
        '207':
          description: Multi-status response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiStatusResponse'
              examples:
                multiStatusResponse:
                  $ref: '#/components/examples/multiStatusResponse'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
    post:
      tags:
        - user-management
      summary: Creates User
      description: |-
        # Creates user
        Creates a new user that belongs to the given legal entity.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserExternal'
            example:
              externalId: admin
              legalEntityExternalId: 0955e686-d31e-4216-b3dd-5d66161d536d
              fullName: Mila
              preferredLanguage: en-GB
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreated'
              example:
                id: 0955e686-d31e-4216-b3dd-5d66161d536d
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
  '/service-api/v2/users/{internalId}':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
      - name: skipHierarchyCheck
        in: query
        description: |
          When this queryParameter is true, the request will omit the Legal Entity hierarchy checks. The Legal
          Entity hierarchy checks are done against the user present in the internal JWT from the `X-CXT-User-Token`
          header.
        required: false
        schema:
          type: boolean
          default: false
    get:
      tags:
        - user-management
      summary: Gets a user by its ID
      description: |-
        # Gets a single user by its unique internal ID

        Retrieves a User entity by its Internal ID.
      operationId: getUserById
      responses:
        '200':
          description: Returns User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser'
              examples:
                getUser:
                  $ref: '#/components/examples/getUser'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  '/service-api/v2/users/{internalId}/profile':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - user-profile-management
      summary: Get User Profile by its User internal ID
      description: |
        # Get User Profile by its User internal ID
        Retrieves the User Profile information associated to a User by its internal ID.
        The addresses will be sorted with the primary address first, then sorted alphabetically by type and then
        alphabetically by key.
      operationId: getUserProfile
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                getUserProfile:
                  $ref: '#/components/examples/getUserProfile'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: view
    put:
      tags:
        - user-profile-management
      summary: Replace User Profile Attributes by User internal ID.
      description: |
        Replace User Profile by User internal ID
        Serves as an extension point to allow any data model extensions made at the top level of the user profile to be
        added or updated via the _additions_ map.
        These are only passed down to the outbound integration service and are **not** stored in DBS.
        Note that as per the empty request body defined, this endpoint **cannot** be used to update any other profile
        data.
      operationId: replaceUserProfileAttributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceUserProfileAttributes'
            examples:
              replaceUserProfileAttributes:
                $ref: '#/components/examples/replaceUserProfileAttributes'
      responses:
        '204':
          description: Successful update
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
  '/service-api/v2/users/{internalId}/profile/phone-addresses':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - user-profile-management
      summary: Get Phone Addresses by User internal ID
      description: |
        # Get User Profile Phone Addresses by User internal ID
        Retrieves a list of User Phone Addresses associated to a User by its internal ID.
        The addresses will be sorted with the primary address first, then sorted alphabetically by type and then
        alphabetically by key.
      operationId: getPhoneAddresses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPhoneAddresses'
              examples:
                getPhoneAddresses:
                  $ref: '#/components/examples/getPhoneAddresses'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: view
    post:
      tags:
        - user-profile-management
      summary: Add new Phone Address to User Profile
      description: |
        # Add new User Profile Phone Address to User Profile
        This endpoint adds a new Phone Address to the list of User Phone Addresses associated to a User by its
        internal User ID.
      operationId: addPhoneAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneAddress'
            examples:
              addPhoneAddress:
                $ref: '#/components/examples/addPhoneAddress'
      responses:
        '201':
          description: Successful request
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
  '/service-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}':
    parameters:
      - name: phoneAddressKey
        in: path
        description: Phone Address Key ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - user-profile-management
      summary: Get user phone number
      description: |
        # Get user phone number
        Get singular phone number based on the key.
      operationId: getPhoneAddress
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPhoneAddress'
              examples:
                getPhoneAddress:
                  $ref: '#/components/examples/getPhoneAddress'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: view
    put:
      tags:
        - user-profile-management
      summary: Update user phone number
      description: |
        # Update user phone number
        Updates a phone number for a user.
      operationId: updatePhoneAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneAddress'
            examples:
              updatePhoneAddress:
                $ref: '#/components/examples/updatePhoneAddress'
      responses:
        '204':
          description: Resource updated
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
    delete:
      tags:
        - user-profile-management
      summary: Delete user phone number
      description: |
        # Delete user phone number

        Delete a singular phone number based on the key.
      operationId: deletePhoneAddress
      responses:
        '204':
          description: Resource successfully deleted
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
  '/service-api/v2/users/{internalId}/profile/electronic-addresses':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - user-profile-management
      summary: Get Electronic Addresses by User internal ID
      description: |
        # Get Electronic Addresses by User internal ID
        Retrieves a list of User Electronic Addresses associated to a User by its internal ID.
        The addresses will be sorted with the primary address first, then sorted alphabetically by type and then
        alphabetically by key.
      operationId: getElectronicAddresses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetElectronicAddresses'
              examples:
                getElectronicAddresses:
                  $ref: '#/components/examples/getElectronicAddresses'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: view
    post:
      tags:
        - user-profile-management
      summary: Add new Electronic Address to User Profile.
      description: |
        # Add new Electronic Address to User Profile
        This endpoint adds a new Electronic Address to the list of User Electronic Addresses associated to a User by
        its internal User ID.
      operationId: addElectronicAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddress'
            examples:
              request:
                $ref: '#/components/examples/addElectronicAddress'
      responses:
        '201':
          description: Successful request
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
  '/service-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}':
    parameters:
      - name: electronicAddressKey
        in: path
        description: Electronic Address Key ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - user-profile-management
      summary: Retrieves Electronic Address by its unique key.
      description: |
        # Retrieves Electronic Address by its unique key
        Retrieves an Electronic Address by its unique key and the internal ID of the user associated to this profile.
      operationId: getElectronicAddress
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetElectronicAddress'
              examples:
                getElectronicAddress:
                  $ref: '#/components/examples/getElectronicAddress'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: view
    put:
      tags:
        - user-profile-management
      summary: Updates Electronic Address by its unique key.
      description: |
        # Update Electronic Address by its unique key
        Modifies an Electronic Address by its unique key and the internal ID of the user associated to this profile.
      operationId: updateElectronicAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectronicAddress'
            examples:
              updateElectronicAddress:
                $ref: '#/components/examples/updateElectronicAddress'
      responses:
        '204':
          description: Resource successfully updated
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
    delete:
      tags:
        - user-profile-management
      summary: Deletes Electronic Address by its unique key.
      description: |
        # Deletes Electronic Address by its unique key
        Removes an Electronic Address by its unique key and the internal ID of the user associated to this profile.
      operationId: deleteElectronicAddress
      responses:
        '204':
          description: Resource successfully deleted
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
  '/service-api/v2/users/{internalId}/profile/postal-addresses':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - user-profile-management
      summary: Get Postal Addresses by User internal ID.
      description: |
        # Get User Profile Postal Addresses by User internal ID
        Retrieves a list of User Postal Addresses associated to a User by its internal ID.
        The addresses will be sorted with the primary address first, then sorted alphabetically by type and then
        alphabetically by key.
      operationId: getPostalAddresses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostalAddresses'
              examples:
                getPostalAddresses:
                  $ref: '#/components/examples/getPostalAddresses'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: view
    post:
      tags:
        - user-profile-management
      summary: Add new Postal Address to User Profile.
      description: |
        # Add new Postal Address to User Profile
        This endpoint adds a new Postal Address to the list of User Postal Addresses associated to a User by its
        internal User ID.
      operationId: addPostalAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostalAddress'
            examples:
              addPostalAddress:
                $ref: '#/components/examples/addPostalAddress'
      responses:
        '201':
          description: Resource created
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
  '/service-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}':
    parameters:
      - name: postalAddressKey
        in: path
        description: Postal Address Key ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - user-profile-management
      summary: Retrieves Postal Address by its unique key.
      description: |
        # Retrieves Postal Address by its unique key
        Retrieves a Postal Address by its unique key and the internal ID of the user associated to this profile.
      operationId: getPostalAddress
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostalAddress'
              examples:
                getPostalAddress:
                  $ref: '#/components/examples/getPostalAddress'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: view
    put:
      tags:
        - user-profile-management
      summary: Edit Postal Address by its unique key.
      description: |
        # Edit Postal Address by its unique key
        Modifies a Postal Address by its unique key and the internal ID of the user associated to this profile.
      operationId: updatePostalAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostalAddress'
            examples:
              updatePostalAddress:
                $ref: '#/components/examples/updatePostalAddress'
      responses:
        '204':
          description: Resource successfully updated
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
    delete:
      tags:
        - user-profile-management
      summary: Deletes Postal Address by its unique key.
      description: |
        # Deletes Postal Address by its unique key
        Removes a Postal Address by its unique key and the internal ID of the user associated to this profile.
      operationId: deletePostalAddress
      responses:
        '204':
          description: Resource deleted
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
      x-BbAccessControl-resource: User Profiles
      x-BbAccessControl-function: Manage User Profiles
      x-BbAccessControl-privilege: edit
  /service-api/v2/users/bulk:
    get:
      tags:
        - user-management
      summary: List Users by a list of their internal IDs.
      description: |
        # List Users by a list of their internal IDs
          Initial call to retrieve the list of enrolled Users by Ids in the System that might belong
          to separate Legal Entities.
      operationId: getUsersInBulk
      parameters:
        - name: id
          in: query
          description: Comma separated list of User Ids
          required: true
          schema:
            type: string
          examples:
            example:
              value: '1,2,3,4'
        - name: query
          in: query
          description: The search term used to search users
          required: false
          schema:
            type: string
          examples:
            example:
              value: backb
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start value for the query
          required: false
          schema:
            type: integer
            format: int32
          examples:
            example:
              value: 20
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          schema:
            type: string
            default: ''
          examples:
            example:
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: size
          in: query
          description: |
            Limit the number of elements on the response. When used in combination with cursor, the value
            is allowed to be a negative number to indicate requesting records upwards from the starting point indicated
            by the cursor.
          required: false
          schema:
            type: integer
            format: int32
          examples:
            example:
              value: 80
      responses:
        '200':
          description: Successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersList'
              examples:
                getUsersInBulk:
                  $ref: '#/components/examples/getUsersList'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
    post:
      tags:
        - user-management
      summary: Ingest Users in Bulk.
      description: |
        # Ingest Users in Bulk
        Ingest Users in Bulk API endpoint. For each User Item passed in the request this endpoint will
        create a new User if the user does not exist or will update it if it does.
      operationId: ingestUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestUsersBulk'
            example:
              - externalId: U00001 - new
                fullName: name
                preferredLanguage: EN
                legalEntityId: 7a382786d514262b75ab9531b749a2b
              - externalId: U00002
                fullName: full name
                preferredLanguage: MK
                legalEntityId: 7a382786d514262b75ab9531b749a2b
      responses:
        '207':
          description: Multi-status response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiStatusResponse'
              examples:
                multiStatusResponse:
                  $ref: '#/components/examples/multiStatusResponse'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
  /service-api/v2/users/bulk/externalids:
    post:
      tags:
        - user-management
      summary: List Users by a list of their External IDs
      description: |
        # List Users by a list of their External IDs
        Retrieve the list of Users by external Ids that might belong to separate Legal Entities. Request won't fail if
        one of the users cannot be found.
      operationId: getUsersByExternalIdsBulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: User external ID
            examples:
              getUsersByExternalIdsBulk:
                $ref: '#/components/examples/getUsersByExternalIdsRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
              examples:
                getUsers:
                  $ref: '#/components/examples/getUsers'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
  '/service-api/v2/users/existing/externalids/{externalId}':
    parameters:
      - name: externalId
        in: path
        description: External unique identifier of the resource
        required: true
        schema:
          type: string
        examples:
          example:
            value: username-001
    get:
      tags:
        - user-management
      summary: Check if User exists by its external ID.
      description: |
        # Check if User exists by its external ID
        Checks whether the given user defined by its external Id already
        exists.
        * Returns 200 OK if the user exists within the user's legal entity hierarchy.
        * Returns 404 NOT FOUND if the user does not exist within the user's legal entity hierarchy."
      operationId: checkUserExists
      responses:
        '200':
          description: Successful empty response
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  '/service-api/v2/users/externalids/{externalId}':
    parameters:
      - name: externalId
        in: path
        description: External unique identifier of the resource
        required: true
        schema:
          type: string
        examples:
          example:
            value: username-001
      - name: skipHierarchyCheck
        in: query
        description: |
          When this queryParameter is true, the request will omit the Legal Entity hierarchy checks. The Legal
          Entity hierarchy checks are done against the user present in the internal JWT from the `X-CXT-User-Token`
          header.
        required: false
        schema:
          type: boolean
          default: false
    get:
      tags:
        - user-management
      summary: Get User by external ID.
      description: |-
        # Get User by external ID

        Retrieves a User entity by its external ID.
      operationId: getUserByExternalId
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser'
              examples:
                getUser:
                  $ref: '#/components/examples/getUser'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  '/service-api/v2/users/externalids/{externalId}/legalentities':
    parameters:
      - name: externalId
        in: path
        description: External unique identifier of the resource
        required: true
        schema:
          type: string
        examples:
          example:
            value: username-001
    get:
      tags:
        - user-management
      summary: Legal Entity by User External ID
      description: |-
        # Legal Entity by User External ID

        Retrieve the Legal Entity that the User Belongs to.
      operationId: getLegalEntityByExternalId
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntity'
              examples:
                getLegalEntity:
                  $ref: '#/components/examples/getLegalEntity'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  /service-api/v2/users/externalids:
    post:
      tags:
        - user-management
      summary: List Users by a list of their External IDs.
      description: |
        # List Users by a list of their External IDs
        Retrieve the list of Users by external Ids that might belong to separate Legal Entities.
      operationId: getUsersByExternalIds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: User external ID
            examples:
              getUsersByExternalIdsBulk:
                $ref: '#/components/examples/getUsersByExternalIdsRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsers'
              examples:
                getUsers:
                  $ref: '#/components/examples/getUsers'
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
  /service-api/v2/users/identities:
    get:
      tags:
        - identity-management
      summary: List User identities
      description: |
        # List User identities

        Retrieve a list of user identities with the search criteria passed as query parameters:
        * externalId: User External ID used as a search term.

        This endpoint results are pageable and admit also the following query parameters:
        * from: Page Number. Skip over pages of elements by specifying a start value for the query.
        * size: Number of records that will be shown each request.

        As an example, a request using the following query parameters:

        ```from=2&size=10```

        will show the elements 20th to 30th (non inclusive)
      operationId: getIdentities
      parameters:
        - name: externalId
          in: query
          description: External unique identifier of the resource
          required: false
          schema:
            type: string
          examples:
            example:
              value: username-001
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start value for the query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              value: 20
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          schema:
            type: string
            default: ''
          examples:
            example:
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: size
          in: query
          description: |
            Limit the number of elements on the response. When used in combination with cursor, the value
            is allowed to be a negative number to indicate requesting records upwards from the starting point indicated
            by the cursor.
          required: false
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              value: 80
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: Overall count of users
              schema:
                type: integer
                format: int32
              required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentities'
              example:
                identities:
                  - id: '001'
                    externalId: U0000010
                    legalEntityId: '012'
                    fullName: Mila
                    legalEntityName: Backbase
                  - id: '002'
                    externalId: U0000011
                    legalEntityId: '023'
                    fullName: Kjiro
                    legalEntityName: Backbase Cardiff
                  - id: '003'
                    externalId: U0000012
                    legalEntityId: '034'
                    fullName: Daniel
                    legalEntityName: Backbase Amsterdam
                totalElements: 1000
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
    post:
      tags:
        - identity-management
      summary: Create/Import user identity
      description: |-
        This endpoint will create of import an Identity based on the request body properties passed:
         * Create identity request will contain an email address and full name properties.
         * If no email address/full-name is present in the request, it will be considered an import request.

        Deprecation note: The ability of importing existing identities into DBS will be removed from this endpoint in
        DBS 2.20.0 and the functionality will be moved to a new endpoint "/v2/users/identities/existing"
      operationId: createIdentity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityRequest'
            example:
              externalId: admin
              legalEntityInternalId: 0955e686-d31e-4216-b3dd-5d66161d536d
              givenName: Mila
              familyName: Example
              emailAddress: mila@example.com
              mobileNumber: 07700 900000
              attributes:
                bank-id: BANK0001
                core-id: milaexample
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIdentityResponse'
              example:
                internalId: 0955e686-d31e-4216-b3dd-5d66161d536d
                externalId: admin
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
        '409':
          description: Conflict Error. User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
              example:
                $ref: '#/components/examples/conflictError'
  /service-api/v2/users/identities/existing:
    post:
      tags:
        - identity-management
      summary: Import existing User in Identity Provider into DBS Users
      description: |
        This endpoint allows the user to import an existing user in an Identity Provider defined by its username into
        a legal Entity defined by its legal entity internal ID.
      operationId: importIdentity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportIdentity'
            example:
              externalId: username-123
              legalEntityInternalId: 7a382786d514262b75ab9531b749a2b
      responses:
        '201':
          description: Identity Imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIdentityResponse'
              example:
                internalId: 0955e686-d31e-4216-b3dd-5d66161d536d
                externalId: username-123
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
        '409':
          description: Conflict Error. User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
              examples:
                conflictError:
                  $ref: '#/components/examples/conflictError'
  '/service-api/v2/users/identities/{internalId}':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - identity-management
      summary: User identity details.
      description: |-
        # User identity details

        Retrieves a User Identity by its internal ID.
      operationId: getIdentity
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentity'
              example:
                externalId: admin
                legalEntityInternalId: 0955e686-d31e-4216-b3dd-5d66161d536d
                fullName: Mila Example
                preferredLanguage: EN
                emailAddress: mila@example.com
                mobileNumber: 07700 900000
                status: ENABLED
                emailVerified: true
                createdDate: 2018-02-04T06:35:41.000Z
                requiredActions:
                  - VERIFY_EMAIL
                  - UPDATE_PASSWORD
                  - ACCEPT_TERMS_AND_CONDITIONS
                givenName: Mila
                familyName: Example
                attributes:
                  bank-id: BANK0001
                  core-id: milaexample
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
    put:
      tags:
        - identity-management
      summary: Update user identity
      description: |
        # Update user identity

        Updates a user in DBS and the identity system.

        Note that to use this endpoint, the feature flag "backbase.users.identity-endpoints-enabled" must be set to true.
      operationId: updateIdentity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityRequest'
            example:
              emailAddress: mila@example.com
              mobileNumber: 07700 900000
              requiredActions:
                - VERIFY_EMAIL
                - UPDATE_PASSWORD
                - ACCEPT_TERMS_AND_CONDITIONS
              givenName: Mila
              familyName: Example
      responses:
        '204':
          description: Resource updated
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  '/service-api/v2/users/identities/{internalId}/actions':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    put:
      tags:
        - identity-management
      summary: Send email with required actions
      description: |-
        # Send email with required actions

        Requests the identity system to send an email to a user with a link to perform the given actions.

        Note that to use this endpoint, the feature flag "backbase.users.identity-endpoints-enabled" must be set to true.
      operationId: sendRequiredActions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityRequiredActionsRequest'
            example:
              actions:
                - UPDATE_PASSWORD
      responses:
        '204':
          description: Successful request
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  '/service-api/v2/users/identities/{internalId}/sessions':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    get:
      tags:
        - identity-management
      summary: Get User Identity sessions
      description: |-
        # Get User Identity sessions

        Retrieves the sessions associated with an identity.

        Note that to use this endpoint, the feature flag "backbase.users.identity-endpoints-enabled" must be set to true.
      operationId: getSessions
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentitySessions'
              example:
                sessions:
                  - id: 9136e697-6c2f-49f6-9ef7-c67c89e8b825
                    ipAddress: 198.51.100.103
                    start: 2018-07-26T15:21:23.000Z
                    lastAccess: 2018-07-26T15:21:23.000Z
                    client: web
                  - id: d04ba3e2-9dd5-484d-b756-e6a86562743a
                    ipAddress: 198.51.100.212
                    start: 2018-07-26T15:23:33.000Z
                    lastAccess: 2018-07-26T15:24:12.000Z
                    client: mobile
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  '/service-api/v2/users/identities/{internalId}/sessions/logout':
    parameters:
      - name: internalId
        in: path
        description: User internal ID
        required: true
        schema:
          type: string
        examples:
          example:
            value: 6d23eb83-ae2c-4c7a-b8f2-2941d67e3be6
    post:
      tags:
        - identity-management
      summary: Logout Identity sessions
      description: |-
        # Logout Identity sessions

        Logs out either a list of sessions for a user, or all sessions for an individual user if an empty sessionIds
        array is set in the request.

        Note that to use this endpoint, the feature flag "backbase.users.identity-endpoints-enabled" must be set to true.
      operationId: logoutSessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityLogoutRequest'
            example:
              sessionIds:
                - a5b0fe7d-c4dd-40a7-bd80-dfc7869327e1
                - d04ba3e2-9dd5-484d-b756-e6a86562743a
      responses:
        '200':
          description: Successful request
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  /service-api/v2/users/identities/realms:
    get:
      tags:
        - identity-management
      summary: Get Realms
      description: |
        # Get Realms Returns a list of the Realms stored in DBS.
        It will return an empty list if no realms are stored in the database.
        If a Legal Entity ID is passed as a query parameter it will return the realm entity
        associated to the requested  Legal Entity. If no association exists between Realm and Legal
        Entity it will throw a Not Found Exception.
      operationId: getRealms
      parameters:
        - name: legalEntityId
          in: query
          description: Legal Entity Internal Id
          required: false
          schema:
            type: string
          examples:
            example:
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRealms'
              example:
                - id: c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53
                  realmName: bank001-corp
                - id: f4e7dbff-86fd-4a9b-9ae4-5b438b27ce14
                  realmName: bank001-cust
                - id: 3da7e7fb-857f-44c2-92aa-80572f6394e2
                  realmName: bank002-corp
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
    post:
      tags:
        - identity-management
      summary: Creates Realm
      description: |-
        # Creates Realm
        Adds a new Realm entity into DBS
      operationId: createRealm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRealmRequest'
            example:
              realmName: backbase-corp
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddRealmResponse'
              example:
                id: 0955e686-d31e-4216-b3dd-5d66161d536d
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
  '/service-api/v2/users/identities/realms/{realmName}/legalentities':
    parameters:
      - name: realmName
        in: path
        description: Backbase identity Realm Name
        required: true
        schema:
          type: string
        examples:
          example:
            value: backbase
    post:
      tags:
        - identity-management
      summary: Assign Realm to Legal Entity.
      description: |-
        # Assign Realm to Legal Entity
        Assigns an existing Realm stored in DBS to an existing Legal Entity defined by its ID. If no Legal Entity or Realm exist for the given IDs a Not Found Exception will be thrown.

        If the Legal Entity we are trying to assign a realm to already has an assigned Realm it will update the record in the database.
      operationId: assignRealm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRealm'
            example:
              legalEntityId: bc24318b-d790-4d4a-ad08-7a761c73e4ab
      responses:
        '201':
          description: Successfully assigned.
        '400':
          description: The request does not meet the API Specification or contains validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                badRequestError:
                  $ref: '#/components/examples/badRequestError'
        '403':
          description: The user couldn't perform the operation due to lack of permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
              examples:
                forbiddenError:
                  $ref: '#/components/examples/forbiddenError'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
  /service-api/v2/users/legalentityids:
    post:
      tags:
        - user-management
      summary: List Users by Legal Entity Ids
      description: |-
        # List Users by Legal Entity Ids

        Retrieve a paged list of Users by given list of legal entity Ids, with optional parameters for query and excluding user ids.

        The list of users is sorted by Legal Entity ID, then Full Name and ultimately ID in ascending order.
      operationId: getUsersByLegalEntityIds
      parameters:
        - name: skipHierarchyCheck
          in: query
          description: |
            When this queryParameter is true, the request will omit the Legal Entity hierarchy checks. The Legal
            Entity hierarchy checks are done against the user present in the internal JWT from the `X-CXT-User-Token`
            header.
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUsersByLegalEntityIdsRequest'
            examples:
              getUserByLegalEntityIdsRequest:
                $ref: '#/components/examples/getUsersByLegalEntityIdsRequest'
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: Overall count of users
              schema:
                type: integer
                format: int32
              required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersList'
              examples:
                getUserByLegalEntityIdsResponse:
                  $ref: '#/components/examples/getUsersList'
        '404':
          description: The resource couldn't be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
              examples:
                notFoundError:
                  $ref: '#/components/examples/notFoundError'
components:
  schemas:
    GetUser:
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 1
          type: string
          description: Internally used unique identification of the resource.
        externalId:
          maxLength: 64
          minLength: 1
          type: string
        preferredLanguage:
          maxLength: 8
          minLength: 2
          type: string
          description: User preferred language.
        legalEntityId:
          maxLength: 36
          minLength: 1
          type: string
        fullName:
          maxLength: 255
          minLength: 1
          type: string
          description: The full name of a user.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - externalId
        - fullName
        - legalEntityId
    GetUsers:
      type: array
      items:
        $ref: '#/components/schemas/GetUser'
    LegalEntity:
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 1
          type: string
        externalId:
          maxLength: 64
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        parentId:
          maxLength: 36
          type: string
        isParent:
          type: boolean
        type:
          type: string
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - externalId
        - id
        - name
    GetUsersByLegalEntityIdsRequest:
      type: object
      properties:
        legalEntityIds:
          type: array
          minLength: 1
          items:
            type: string
            description: Legal entity ids
        excludeIds:
          type: array
          items:
            type: string
            description: List of user internal ids to be excluded from the search
        query:
          type: string
          maxLength: 255
          minLength: 0
          description: 'The search term used to search users. Performs a case insensitive search on users full name, allowing for partial matches'
        externalId:
          type: string
          maxLength: 64
          minLength: 0
          description: External Id to search for
        cursor:
          maxLength: 330
          minLength: 0
          type: string
          description: 'Record UUID. As an alternative to specifying ''from'', this allows a search to begin from a specified record'
        from:
          type: integer
          minimum: 0
          default: 0
          description: Page Number. Skip over pages of elements by specifying a start value for the query.
          format: int32
        size:
          type: integer
          minimum: 1
          default: 10
          description: Query parameter for pagination - number of records that will be shown on the page.
          format: int32
        sortOrder:
          maxLength: 255
          minLength: 0
          type: string
          description: Sort order for the service.
      required:
        - legalEntityIds
    GetUsersList:
      type: object
      properties:
        totalElements:
          type: integer
          description: total number of elements matching the query
          format: int64
        users:
          type: array
          items:
            $ref: '#/components/schemas/GetUser'
      required:
        - totalElements
        - users
    UpdateUsersInBatchRequest:
      type: array
      items:
        $ref: '#/components/schemas/BatchUser'
    BatchUser:
      type: object
      properties:
        userUpdate:
          $ref: '#/components/schemas/User'
        externalId:
          maxLength: 64
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: External user id
      required:
        - externalId
        - userUpdate
    MultiStatusResponse:
      type: array
      items:
        $ref: '#/components/schemas/BatchResponseItem'
    BatchResponseItem:
      type: object
      properties:
        resourceId:
          minLength: 1
          type: string
          description: Id of the resource
        status:
          type: string
          description: Http status codes available for response
          enum:
            - '200'
            - '201'
            - '204'
            - '400'
            - '404'
            - '500'
        errors:
          type: array
          description: List of error messages
          items:
            type: string
            description: Error message
      required:
        - resourceId
        - status
    User:
      type: object
      properties:
        externalId:
          maxLength: 64
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: external Id of the user.
        legalEntityId:
          maxLength: 36
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Legal Entity Id of the user.
        fullName:
          maxLength: 255
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Full name of the user.
        preferredLanguage:
          maxLength: 8
          minLength: 2
          type: string
          description: User preferred language.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - externalId
        - fullName
        - legalEntityId
    UserExternal:
      type: object
      properties:
        externalId:
          maxLength: 64
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: external Id of the user.
        legalEntityExternalId:
          maxLength: 64
          minLength: 1
          pattern: ^\S+$
          type: string
          description: Legal Entity External Id of the user.
        fullName:
          maxLength: 255
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Full name of the user.
        preferredLanguage:
          maxLength: 8
          minLength: 2
          type: string
          description: User preferred language.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - externalId
        - fullName
        - legalEntityExternalId
    UserCreated:
      type: object
      properties:
        id:
          type: string
          description: Internally used unique identification
      required:
        - id
    IngestUsersBulk:
      type: array
      items:
        $ref: '#/components/schemas/User'
    PhoneAddress:
      type: object
      properties:
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: 'Key identifying the type of phone number, e.g. mobile or land line.'
        primary:
          type: boolean
          description: Flag denoting whether this is the main phone number.
        number:
          maxLength: 30
          minLength: 1
          type: string
          description: Phone number.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - number
        - type
    ElectronicAddress:
      type: object
      properties:
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: 'Key identifying the type of electronic address, e.g. work or personal.'
        primary:
          type: boolean
          description: Flag denoting whether this is the main electronic address.
        address:
          maxLength: 255
          minLength: 1
          type: string
          description: Address.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - address
        - type
    PostalAddress:
      type: object
      properties:
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: 'Key identifying the type of postal address, e.g. residential, business, po-box, mail-to, delivery-to.'
        primary:
          type: boolean
          description: Flag denoting whether this is the main postal address.
        department:
          maxLength: 70
          type: string
          description: Department.
        subDepartment:
          maxLength: 70
          type: string
          description: Sub Department.
        addressLine:
          maxLength: 70
          type: string
          description: Address Line.
        buildingNumber:
          maxLength: 255
          type: string
          description: Building number.
        streetName:
          maxLength: 255
          type: string
          description: Street.
        townName:
          maxLength: 35
          type: string
          description: Town.
        postalCode:
          maxLength: 16
          type: string
          description: Postcode.
        countrySubDivision:
          maxLength: 35
          type: string
          description: Country sub-division.
        country:
          maxLength: 3
          type: string
          description: Country code - ISO 3166.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - type
    UserProfile:
      type: object
      properties:
        fullName:
          maxLength: 255
          minLength: 1
          type: string
          description: Full name of the user.
        phone-addresses:
          type: array
          description: The phone numbers the user can be reached by.
          items:
            $ref: '#/components/schemas/GetPhoneAddress'
        electronic-addresses:
          type: array
          description: The electronic addresses the user can be reached by.
          items:
            $ref: '#/components/schemas/GetElectronicAddress'
        postal-addresses:
          type: array
          description: The postal addresses the user can be reached by.
          items:
            $ref: '#/components/schemas/GetPostalAddress'
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - fullName
    ReplaceUserProfileAttributes:
      type: object
      properties:
        additions:
          type: object
          additionalProperties:
            type: string
    GetPhoneAddress:
      type: object
      properties:
        key:
          maxLength: 70
          minLength: 1
          type: string
          description: Internally used unique identification of the resource.
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: 'Key identifying the type of phone number, e.g. mobile or land line.'
        primary:
          type: boolean
          description: Flag denoting whether this is the main phone number.
        number:
          maxLength: 30
          minLength: 1
          type: string
          description: Phone number.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - key
        - number
        - type
    GetPostalAddress:
      type: object
      properties:
        key:
          maxLength: 70
          minLength: 1
          type: string
          description: Internally used unique identification of the resource.
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: 'Key identifying the type of postal address, e.g. residential, business, po-box, mail-to, delivery-to.'
        primary:
          type: boolean
          description: Flag denoting whether this is the main postal address.
        department:
          maxLength: 70
          type: string
          description: Department.
        subDepartment:
          maxLength: 70
          type: string
          description: Sub Department.
        addressLine:
          maxLength: 70
          type: string
          description: Address Line.
        buildingNumber:
          maxLength: 255
          type: string
          description: Building number.
        streetName:
          maxLength: 255
          type: string
          description: Street.
        townName:
          maxLength: 35
          type: string
          description: Town.
        postalCode:
          maxLength: 16
          type: string
          description: Postcode.
        countrySubDivision:
          maxLength: 35
          type: string
          description: Country sub-division.
        country:
          maxLength: 3
          type: string
          description: Country code - ISO 3166.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - type
        - key
    GetElectronicAddress:
      type: object
      properties:
        key:
          maxLength: 70
          minLength: 1
          type: string
          description: Internally used unique identification of the resource.
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: 'Key identifying the type of electronic address, e.g. work or personal.'
        primary:
          type: boolean
          description: Flag denoting whether this is the main electronic address.
        address:
          maxLength: 255
          minLength: 1
          type: string
          description: Address.
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - key
        - address
        - type
    GetPhoneAddresses:
      type: object
      properties:
        phone-addresses:
          type: array
          items:
            $ref: '#/components/schemas/GetPhoneAddress'
    GetPostalAddresses:
      type: object
      properties:
        postal-addresses:
          type: array
          items:
            $ref: '#/components/schemas/GetPostalAddress'
    GetElectronicAddresses:
      type: object
      properties:
        electronic-addresses:
          type: array
          items:
            $ref: '#/components/schemas/GetElectronicAddress'
    GetIdentities:
      type: object
      properties:
        totalElements:
          type: integer
          description: total number of elements matching the query
          format: int64
        identities:
          type: array
          items:
            $ref: '#/components/schemas/IdentityListedItem'
      required:
        - totalElements
        - identities
    IdentityListedItem:
      type: object
      properties:
        id:
          maxLength: 36
          minLength: 1
          type: string
        externalId:
          maxLength: 64
          minLength: 1
          type: string
        legalEntityId:
          maxLength: 36
          minLength: 1
          type: string
        fullName:
          maxLength: 255
          minLength: 1
          type: string
        legalEntityName:
          maxLength: 128
          minLength: 1
          type: string
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - externalId
        - fullName
        - id
        - legalEntityId
        - legalEntityName
    CreateIdentityRequest:
      type: object
      properties:
        externalId:
          maxLength: 64
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: external Id (username) of the user.
        legalEntityInternalId:
          maxLength: 36
          minLength: 1
          pattern: ^\S+$
          type: string
          description: Internal (Backbase) ID of the Legal Entity the user will belong to.
        fullName:
          maxLength: 255
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Full name of the user.
        emailAddress:
          maxLength: 254
          minLength: 3
          type: string
          description: Email address of user
        mobileNumber:
          maxLength: 20
          minLength: 1
          type: string
          description: Mobile number of user
        givenName:
          maxLength: 255
          minLength: 1
          type: string
        familyName:
          maxLength: 255
          minLength: 1
          type: string
        attributes:
          type: object
          description: Custom attributes to be added to the user.
          additionalProperties:
            type: string
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - legalEntityInternalId
    CreateIdentityResponse:
      type: object
      properties:
        internalId:
          type: string
          description: Internally used unique identification for the user in DBS
        externalId:
          type: string
          description: Externally used identification for the user identity in Identity
      required:
        - externalId
        - internalId
    GetIdentity:
      type: object
      properties:
        externalId:
          maxLength: 64
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: external Id (username) of the user.
        legalEntityInternalId:
          maxLength: 36
          minLength: 1
          pattern: ^\S+$
          type: string
          description: Internal (Backbase) ID of the Legal Entity the user belongs to.
        fullName:
          maxLength: 255
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Full name of the user.
        preferredLanguage:
          maxLength: 8
          minLength: 2
          type: string
          description: User preferred language.
        emailAddress:
          maxLength: 254
          minLength: 3
          type: string
          description: Email address of user.
        mobileNumber:
          maxLength: 20
          minLength: 1
          type: string
          description: Mobile number of user.
        status:
          type: string
          description: The user's account status.
          enum:
            - ENABLED
            - DISABLED
            - TEMPORARILY_LOCKED
            - DORMANT
            - INACTIVE
            - ACCESS_REVOKED
        emailVerified:
          type: boolean
          description: Defines whether or not the user has verified their email address.
        createdDate:
          type: string
          description: The date and time that the user was created.
          format: date-time
        requiredActions:
          type: array
          description: User will be required to perform these actions when they next log in. Allowable values are configurable in Identity.
          items:
            maxLength: 50
            minLength: 1
            type: string
        givenName:
          maxLength: 255
          minLength: 1
          type: string
        familyName:
          maxLength: 255
          minLength: 1
          type: string
        attributes:
          type: object
          description: Custom attributes of the user
          additionalProperties:
            type: string
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - externalId
        - familyName
        - fullName
        - givenName
        - legalEntityInternalId
    UpdateIdentityRequest:
      type: object
      properties:
        fullName:
          maxLength: 255
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Full name of the user.
        emailAddress:
          maxLength: 254
          minLength: 3
          type: string
          description: Email address of user.
        mobileNumber:
          maxLength: 20
          type: string
          description: Mobile number of user.
        requiredActions:
          type: array
          description: User will be required to perform these actions when they next log in. Allowable values are configurable in Identity.
          items:
            maxLength: 50
            minLength: 1
            type: string
        givenName:
          maxLength: 255
          minLength: 1
          type: string
        familyName:
          maxLength: 255
          minLength: 1
          type: string
        attributes:
          type: object
          description: Custom attributes of the user
          additionalProperties:
            type: string
        additions:
          type: object
          additionalProperties:
            type: string
    IdentityRequiredActionsRequest:
      type: object
      properties:
        actions:
          type: array
          description: User will be sent an email with a link to perform these actions
          minItems: 0
          maxItems: 50
          items:
            type: string
    GetIdentitySessions:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/IdentitySession'
    IdentitySession:
      type: object
      properties:
        id:
          type: string
        ipAddress:
          type: string
        start:
          type: string
          format: date-time
        lastAccess:
          type: string
          format: date-time
        client:
          type: string
    IdentityLogoutRequest:
      type: object
      properties:
        sessionIds:
          type: array
          items:
            type: string
      required:
        - sessionIds
    GetRealms:
      type: array
      items:
        $ref: '#/components/schemas/Realm'
    Realm:
      type: object
      properties:
        id:
          type: string
          description: Internally used unique identification
        realmName:
          maxLength: 255
          minLength: 1
          type: string
          description: Realm name
      required:
        - id
        - realmName
    AddRealmRequest:
      type: object
      properties:
        realmName:
          maxLength: 255
          minLength: 1
          type: string
          description: Realm name
      required:
        - realmName
    AddRealmResponse:
      type: object
      properties:
        id:
          type: string
          description: Internally used unique identification of the new Realm
      required:
        - id
    AssignRealm:
      type: object
      properties:
        legalEntityId:
          maxLength: 36
          minLength: 1
          pattern: ^\S+$
          type: string
          description: Internal (Backbase) ID of the Legal Entity.
      required:
        - legalEntityId
    ImportIdentity:
      type: object
      properties:
        externalId:
          maxLength: 64
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: external Id (username) of the user.
        legalEntityInternalId:
          maxLength: 36
          minLength: 1
          pattern: ^\S+$
          type: string
          description: Internal (Backbase) ID of the Legal Entity the user will belong to.
      required:
        - externalId
        - legalEntityInternalId
    ErrorItem:
      title: ErrorItem
      type: object
      properties:
        message:
          description: Any further information.
          type: string
        key:
          description: '{capability-name}.api.{api-key-name}. For generated validation errors this is the path in the document the error resolves to. e.g. object name + ''.'' + field'
          type: string
        context:
          description: Context can be anything used to construct localised messages.
          type: object
          additionalProperties:
            type: string
    BadRequestError:
      title: BadRequestError
      type: object
      properties:
        message:
          description: Any further information
          type: string
        errors:
          description: Detailed error information
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'
      required:
        - message
    ForbiddenError:
      title: ForbiddenError
      type: object
      properties:
        message:
          description: Any further information
          type: string
        errors:
          description: Detailed error information
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'
    NotFoundError:
      title: NotFoundError
      type: object
      properties:
        message:
          description: Any further information
          type: string
        errors:
          description: Detailed error information
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'
    Conflict:
      type: object
      properties:
        message:
          description: Any further information
          type: string
        errors:
          description: Detailed error information
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'
  examples:
    badRequestError:
      value:
        message: Bad Request
        errors:
          - message: 'Value Exceeded. Must be between {min} and {max}.'
            key: common.api.shoesize
            context:
              max: '50'
              min: '1'
    conflictError:
      value:
        message: Conflict error
        errors:
          - message: The request could not be completed due to a conflict with the current state of the resource.
            key: transactions.api.billingstatus.transaction
            context:
              billingStatus: BILLED
    forbiddenError:
      value:
        message: Access to requested resource denied.
        errors:
          - message: 'Resource access denied due to an insufficient user quota of {quota}.'
            key: common.api.quota
            context:
              quota: someQuota
    notFoundError:
      value:
        message: Resource not found.
        errors:
          - message: 'Unable to find the resource requested resource: {resource}.'
            key: common.api.resource
            context:
              resource: aResource
    getUsers:
      value:
        - externalId: U0000010
          legalEntityId: c7a382786d514262b75ab9531b749a2b
          id: d100c54f79784731843f0db89a2d2957
          fullName: David Flores
          preferredLanguage: fr-FR
        - externalId: U0000011
          legalEntityId: dbc9e566d44f4cd9a1f09ad3f6729f15
          id: fafd8fd6b661402b8411a48050bdc9ad
          fullName: Sofia Duncan
        - externalId: U0000012
          legalEntityId: 77f8c4cd11c8436ba77f8ca34e6a173d
          id: bc9a83bf025449dea4ecc05ce816aebd
          fullName: Henry Duncan
        - externalId: U0000013
          legalEntityId: '34'
          id: 5360dbba1a254889ba94c22ff01b1c37
          fullName: Bart Nyman
        - externalId: U0000014
          legalEntityId: c9fc30f4e5fb492c97ed0a05f926aecc
          id: 37c1b6b531a34259b4c518eebc0b34a2
          fullName: Peter
        - externalId: U0000015
          legalEntityId: 0f6d14f40e064deeaee351befd53d3e7
          id: b5f499e8f3c94cf39997957ce4cbec59
          fullName: Sandra
        - externalId: U0000016
          legalEntityId: 6e83bf0d-0d77-4320-b854-4a704e1d50c3
          id: b5f499e8f3c94cf39997957ce4cbei84
          fullName: Marko Ilievski
          preferredLanguage: en-GB
        - externalId: U0000017
          legalEntityId: 6e83bf0d-0d77-4320-b854-4a704e1d50c3
          id: b5f499e8f3c94cf39997957ce4cbec59t97
          fullName: Daniela Petkovska
    getUser:
      value:
        externalId: U0000010
        legalEntityId: c7a382786d514262b75ab9531b749a2b
        id: d100c54f79784731843f0db89a2d2957
        fullName: David Flores
        preferredLanguage: fr-FR
    getLegalEntity:
      value:
        id: a154ebc2-3116-450e-9e26-1612d7cb48fb
        externalId: a00f4955-c920-4604-9ec8-4e2cddd447d6
        name: Bank Corp.
        parentId: 8cc493bb-ffca-4b47-ae2f-594cd7282d30
        isParent: true
    getUsersByLegalEntityIdsRequest:
      value:
        legalEntityIds:
          - '023'
          - '034'
        excludeIds:
          - 0955e686-d31e-4216-b3dd-5d66161d536e
          - 0955e686-d31e-4216-b3dd-5d66161d536f
        query: U0
        from: 0
        size: 10
    getUsersList:
      value:
        users:
          - id: '001'
            externalId: U0000010
            legalEntityId: '012'
            fullName: Mila
          - id: '002'
            externalId: U0000011
            legalEntityId: '023'
            fullName: Kjiro
          - id: '003'
            externalId: U0000012
            legalEntityId: '034'
            fullName: Daniel
        totalElements: 1000
    multiStatusResponse:
      value:
        - resourceId: 06a90bed-1f7b-48b2-a3c0-e0fa7aa82060
          status: '204'
        - resourceId: 009acfe9-b5d5-4133-8ee8-baaa757a0605
          status: '400'
          errors:
            - Validation constraint in field 'externalId'
            - Validation constraint in field 'fullName'
    getUsersByExternalIdsRequest:
      value:
        - U-001
        - U-002
    getUserProfile:
      value:
        fullName: John Doe
        phone-addresses:
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e1
            type: MOBILE
            primary: true
            number: 07717 371949
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
            type: LAND_LINE
            primary: false
            number: 02920 671937
        electronic-addresses:
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e1
            type: E_MAIL
            primary: true
            address: test@tester.com
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
            type: PERSONAL
            primary: false
            address: test_personal@tester.com
        postal-addresses:
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e1
            type: BUSINESS
            primary: false
            addressLine: The Bonded Warehouse
            streetName: Atlantic Wharf
            townName: Cardiff
            postalCode: CF10 4HE
            country: GB
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
            type: HOME
            primary: true
            addressLine: 2 Hertsmere Rd
            streetName: Canary Wharf
            townName: London
            postalCode: E14 4AB
            country: GB
    replaceUserProfileAttributes:
      value:
        additions:
          shoe_size: '8'
          favorite_color: blue
    addPostalAddress:
      value:
        type: HOME
        primary: true
        addressLine: 2 Hertsmere Rd
        streetName: Canary Wharf
        townName: London
        postalCode: E14 4AB
        country: GB
    addPhoneAddress:
      value:
        type: LAND_LINE
        primary: false
        number: 02920 671937
    addElectronicAddress:
      value:
        type: PERSONAL
        primary: false
        address: test_personal@tester.com
    getPostalAddresses:
      value:
        postal-addresses:
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e1
            type: BUSINESS
            primary: false
            addressLine: The Bonded Warehouse
            streetName: Atlantic Wharf
            townName: Cardiff
            postalCode: CF10 4HE
            country: GB
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
            type: HOME
            primary: true
            addressLine: 2 Hertsmere Rd
            streetName: Canary Wharf
            townName: London
            postalCode: E14 4AB
        country: GB
    getPhoneAddresses:
      value:
        phone-addresses:
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e1
            type: MOBILE
            primary: true
            number: 07717 371949
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
            type: LAND_LINE
            primary: false
            number: 02920 671937
    getElectronicAddresses:
      value:
        electronic-addresses:
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e1
            type: E_MAIL
            primary: true
            address: test@tester.com
          - key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
            type: PERSONAL
            primary: false
            address: test_personal@tester.com
    getPostalAddress:
      value:
        key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
        type: HOME
        primary: true
        addressLine: 2 Hertsmere Rd
        streetName: Canary Wharf
        townName: London
        postalCode: E14 4AB
        country: GB
    getPhoneAddress:
      value:
        key: cb7653b5-31b2-481d-b9b5-aa4b415c96e2
        type: LAND_LINE
        primary: false
        number: 02920 671937
    getElectronicAddress:
      value:
        key: cb7653b5-31b2-481d-b9b5-aa4b415c96e1
        type: E_MAIL
        primary: true
        address: test@tester.com
    updatePostalAddress:
      value:
        type: HOME
        primary: true
        addressLine: 2 Hertsmere Rd
        streetName: Canary Wharf
        townName: London
        postalCode: E14 4AB
        country: GB
    updatePhoneAddress:
      value:
        type: LAND_LINE
        primary: false
        number: 02920 671937
    updateElectronicAddress:
      value:
        type: PERSONAL
        primary: false
        address: test_personal@tester.com
